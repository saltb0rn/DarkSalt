*How to autoreload when source file is modified on the fly*
1. Pass debug=True to tornado.web.Application while instantiating
   #+BEGIN_SRC python
   #! /usr/bin/env python3
   import tornado.web.Application
   app = tornado.web.Application(handlers=handers,debug=True)
   #+END_SRC


*How to handle request and how to response*
1. Use tornado.web.RequestHandler.request. Show common cases in POST request
   #+BEGIN_SRC python
   #! /usr/bin/env python3
   class ExampleHandler(tornado.web.RequestHandler):
       """
       Assuming that server would listen on port 8000 on localhost,
       and will we use 'curl' to make tests. The url of this handler
       is "/"
       """
       def post(self):
	   ##############################################################
	   # For request
	   # To retrive headers, which is a dict.
	   self.request.headers
	   # In case of "Content-Type: application/x-www-form-urlencoded".
	   # "curl -d arg=1 http://localhost:8000/";
	   # The way to extract argument is same as how a GET request does
	   # although the GET request has no Content-Type header.
	   arg = self.get_argument("arg")

	   # In case of "Content-Type: application/json".
	   # "curl -d '{"name": "Mike"}' http://localhost:8000/";
	   data = tornado.escape.json_decode(self.request.body)
	   name = data["name"]

	   # In case of "Content-Type: multipart/form-data".
	   # "curl -F image=@/path/to/image.png http://localhost:8000/";
	   # To retrive the files uploaded, use self.request.files, which
	   # is a dict
	   image = self.request.files["image"]

	   ##############################################################
	   # For response
	   # To decised what Content-Type you want to response
	   # In case of "Content-Type: text/html"
	   self.write("<!DOCTYPE html><html>...</html>")
	   # or if you prefer templates, don't forget to
	   # use the tornado.web.Application settings
	   # "template_path=/path/to/you/template/directory"
	   # to load your templates, and
	   # "static_path=/path/to/you/static/directory"
	   # to load your static
	   self.render("template.html", tpl_var1="tpl_variable")

	   # In case of "Content-Type: application/json"
	   self.write(tornado.escape.json_encode(
	       {"name": "Alice"})
	   self.set_header("Content-Type", "application/json")

	   # In case of "Content-Type: application/xml"
	   self.write("""
	   <?xml version="1.0" encoding="UTF-8"?>
	   <note>
	   <to>Tove</to>
	   <from>Jani</from>
	   <heading>Reminder</heading>
	   <body>Don't forget me this weekend!</body>
	   </note>
	   """)
	   self.set_header("Content-Type", "application/xml")

   #+END_SRC


*How to use session cookies*

1. Signs and timestamps a cookie so it cannot be forged, this cookie would be a secure cookies.
   Secure cookies use signature to valid whether cookies was edited.

2. Preparation for secure cookie
   1. use base64 and uuid to calculate a cookie_secret which would be random and unique
      #+BEGIN_SRC python
      #! /usr/bin/python3
      import base64, uuid
      base64.b64encode(uuid.uuid4().bytes + uuid.uuid4().bytes)
      # we assume the result is "Example_cookie_secret/VB9oXwQt8S0R0kRvJ5/xJ89E="
      #+END_SRC
   2. set cookie_secret to the result returned above when tornado.web.Application instantiating.
      (do Not pass via variable, it needs the hard code, otherwise the cookie_secret will be changed
      every time the server restart)
      #+BEGIN_SRC python
      #! /usr/bin/env python3
      application = tornado.web.Application(
	  handlers=handlers, cookie_secret="Example_cookie_secret/VB9oXwQt8S0R0kRvJ5/xJ89E=")
      #+END_SRC

3. For safe storage, pass httponly=True to set_secure_cookie or set_cookie, so that web browser
   cannot read that cookie via JavaScript or console;
   #+BEGIN_SRC python
   #! /usr/bin/env python3
   class ExampleHandler(tornado.web.RequestHandler):
       def get(self):
	   self.set_secure_cookie("example_id", "example_value", httponly=True)
	   self.set_cookie("example_id2", "example_value2", httponly=True)
	   self.write("example")
   #+END_SRC

4. For safe transforming, pass secure=True to set_secure_cookie or set_cookie, so that indicate cookie
   has to be transformed by SSL
   #+BEGIN_SRC python
   #! /usr/bin/env python3
   class ExampleHandler(tornado.web.RequestHandler):
       def get(self):
	   self.set_secure_cookie("example_id", "example_value", secure=True)
	   self.set_cookie("example_id2", "example_value2", secure=True)
	   self.write("example")
   #+END_SRC

5. For safe request, we need to defend from Cross-site request forgery.
   To read [[http://www.tornadoweb.org/en/stable/guide/security.html#xsrf][this]].

6. For how to authenticate user identifiers, Tornado use secure cookies instead of server-side session
   storage, that means Tornado does not look like Django which use self.request.session.

   Here is about [[http://www.tornadoweb.org/en/stable/guide/security.html?highlight=web.authenticated#user-authentication][how]].

Further information on cookie is available [[https://tools.ietf.org/html/rfc6265#page-8][here]].


*How to build async webserver (which uses external web service)*
1. [[http://www.tornadoweb.org/en/stable/httpclient.html#tornado.httpclient.HTTPClient][HTTPClient has been changed in version 5.0]], we cannot use HTTPClient in IOLoop, use AsynHTTPClient
2. '@tornado.web.asynchronous' and 'tornado.web.RequestHandler.finish', and some callback
3. '@tornado.gen.coroutine', '@tornado.gen.engine'

*How to use websocket*
[[https://github.com/tornadoweb/tornado/tree/master/demos/websocket][Here]] is an example from GitHub by tornadoweb, yup, the official repository.
