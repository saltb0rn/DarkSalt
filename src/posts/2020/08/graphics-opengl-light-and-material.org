#+title: 图形学-光和材质
#+date: 2020-08-17
#+index: 图形学-光和材质
#+tags: Graphics
#+begin_abstract
在图形学中,决定一个物体是否逼真(realism),除了投影方法外,另外一个重要因素就是光照(lighting)了.

包括这几个方面: 光(light)影(shadow)的表现,不同材质(material)的物体如何反射(reflects)光线,以及当光线照射到半透明物体时该如何弯曲(bend)/衍射(diffracted).

这篇笔记主要是关于光,材质和贴图(texture)方面的概念,这对以后上手编写 =Fragment Shader= 很有帮助,不过目前还是先回到 =OpenGL 1.X= 上吧.
#+end_abstract


*** 现实与计算机中颜色

    *在物理学上,我们之所以能够看到一件物体是因为光照射到物体上,然后物体再反射光,最后被我们眼睛接收到.*

    光据有波动性(运动规率图类似 $\cos\theta$ 函数图像),平时的可见光是由不同波长(wavelength,单位是米)的光按照不同比例混合而成,

    不同的波长表现的颜色不一样,就是说一种波长对应一种颜色,而不同比例混合得到光的颜色看起来也不一样.著名的七色光(红,橙,黄,绿,青,蓝和紫,以长波长到短波长的顺序排列)就是从白光分解出来的.

    先补充一下波长相关的概念:

    [[../../../files/wave.jpeg]]

    在单位时间内波的传播速度叫做波速(wavespeed,单位是米/每秒),而光的波速也就是我们平时说的光速,波长就是指在一个周期内(单位是秒)能够传播的距离.

    分别用 $\mu$, $\lambda$ 和 $T$ 表示波速,波长以及周期,关系如下: $\lambda = \mu T$.

    也可以通过频率来描述波长,频率是每秒变化的次数,而周期是变化一次所需要的时间,也就是说计算出一秒可以有多少个周期就是频率了,所以频率 $v = \frac{1}{T}$.

    再结合上面的波长公式可以得到: $\lambda = \frac{\mu}{v}$.


    *当光照射到物体上时,和物体表面颜色不一样的光都会被吸收掉,没有被吸收的光会被反射到我们的眼睛中,这个时候我们看到的光就是和物体的颜色一样,这就是我们看到物体是什么颜色的原理,可以简单地认为:同性相斥,异性吸引.*

    当然实际我们看到的颜色还受眼睛的视锥细胞(cone cells)影响,它们是一种感应器,人类有(S-cones, M-cones, L-cones)三类视锥细胞,分别接收感应三种不同程度波长的光: S(mall), M(edium), L(ong),不同物种数量可能不一样,比如皮皮虾的比人类多.

    并且每个人的视锥细胞都不是一样的,因此我看到的颜色不一定是你眼中的那样,下面这图是视锥细胞在不同波长刺激的反应:

    [[../../../files/cone-response.jpg]]

    著名的三原色理论(RGB)就是这个图的简化版, $RGB$ 分别表示红色(red), 绿色(green)和蓝色(blue)三项,这三种颜色不能通过其它颜色混合得到,反而它们可以混合得到其它颜色.

    因为 $SML$ 三种波长指的是一个范围,并非特指示某一种颜色,所以并不能 $RGB$ 等同于 $SML$,这点需要分清.

    $RGB$ 作为计算机常用的颜色模型,每一项都用固定大小空间进行储存,常见的 24 位深颜色,也就是每项用一个(8位)字节储存(因为一个颜色用24位储存,所以才叫 24 位深颜色);不常见的 16 位深颜色, $R$ 和 $B$ 各占 5 位, $G$ 占 6 位.

    当然还有其它位深的,下文统一采用 24 位深颜色讲解.计算机定义了一个颜色表(color table),按照索引来排列颜色,因为有 $RGB$ 三个部分,所以颜色的索引是这样的 $\left(R, G, B\right)$,

    在 24 位深下,每一项的取值范围是 $\left[0, 2^{8} - 1\right]$, 比如三原色 $RGB$ 分别的索引是 $\left(255, 0, 0\right)$, $\left(0, 255, 0\right)$ 以及 $\left(0, 0, 255\right)$,黑色是 $\left(0, 0, 0\right)$.

    还可以用十六进制来表示,比如三原色分别是: =0xff0000=, =0x00ff00= 以及 =0x0000ff=.

    当然索引的排列是有意义的, *每个部分的数值表示了对应颜色的光子被反射的量,索引等于反射光子的量,索引越低,人看到的颜色就越暗,也就是常说的颜色越深*, 因此 $\left(0, 0, 0\right)$ 就是最暗的颜色, 而 $\left(255, 255, 255\right)$ 就是最亮的颜色.

    可以通过一些图像处理软件动手对三原色其中之一进行验证,比如对比一下 $\left(255, 0, 0\right)$ 与 $\left(127, 0, 0\right)$,后者回比前者更加深.

    颜色之间可以进行加法,美术课上混合颜料和光的混合其实就是颜色加法的例子,比如颜料 $Colof_{a} = \left(R_{a}, G_{a}, B_{a}\right)$ 和 $Colof_{b} = \left(R_{b}, G_{b}, B_{b}\right)$ 混合得到颜色 $Color_{c} = \left(R_{a} + R_{b}, G_{a} + G_{b}, B_{a} + B_{b}\right)$,

    如果 $Color_{c}$ 的 $RGB$ 任意一项超过 $2^8 - 1$,也就意味着超过了能够显示最大亮度了,那么就把该项的值固定为255.

    单纯从"反射程度"角度来表示颜色也是可以的,程度的取值范围在 $\left[0,1\right]$,也就是 $100\%$ 以内,比如 $\left(1.0, 1.0, 1.0\right)$ 表示 $\left(255, 255, 255\right)$, =OpenGL= 就是这样表示颜色的.

    关于颜色的知识就先简单地说到这里,想更深入就需要去学习计算机色彩学了.


*** 现实的光照以及计算机中的光照模型

    光的意义在于它能够照明物体,所以并不能只谈光,需要从 *照明* 与 *被照明* 这两角度进行了解,主动照明的当然就是光源(light source)了,被照明的是物体,光照射到物体发生什么完全由物体表面材质(material)特点决定,比如颜色,光泽度,是平还是圆的等等.

    计算机的光照模型基本上就是对现实光照的抽象,虽然说不同的图形系统的光照系统都一样,不过都差不多, =OpenGl= 和 =Direct3D= 就基本相同,所以在介绍完现实的光照后会通过 =OpenGL= 的光照模型进行了解.

**** 光源

     这部分的内容主要是围绕光源以及光的反射进行讨论,现实中光的反射方式有两种: 镜面反射(specular reflection)和漫反射(diffuse reflection),光如何反射是取决于反射面(也就是它照射的物体表面)的,如果反射面光滑,那么就是镜面反射;相反,反射面粗糙,那么就是漫反射.

     [[../../../files/diffuse-vs-specular.png]]


     *可以看到在镜面反射中(左边)*,入射光(incoming ray)和反射光(reflected ray)的角度是一样的,观察者(viewer)实际上只能看到一个完美的反射光(因为反射角要等于入射角,符合这个条件的只有一个),这样的反射光一被叫做反射高光(specular highlights).

     当然现实中可不是只能看到一条完美的反射光,而是一束反射光(specular reflection cone),就像这样,

     [[../../../files/reflection-cone.png]]

     处于完美反射光角度上的所看到的反射光是最亮,越是偏离这个角度,看到的反射光越暗.反射光束的角度是由物体表面的光泽度(shininess)决定的,

     [[../../../files/specular_hilites.png]]

     这图上面的球体的光泽度从左到右体依次递增,光泽度越高,光束的角度越小.仔细回想一下自己是否在日常生活中见到过弯曲的表面上有一个白色光的圆,其实就是上面这图的实例,比如光照下的矿泉水瓶,红酒杯等等.

     这种光叫做 *镜面光(specular)*.


     *而在理想的漫反射(右边)中*,入射光被分散成多个不同方向并且能量大小相同的反射光,观察者可以在任何方位看到反射光,如果光是以平行射线的形式照射到表面,光源位置在无限远处就属于这种情况,比如室外的太阳光,那么表面就是被均匀照明(参考上面的图: Diffuse Reflection),

     假设光是以非平行射线的形式照射到表面,比如物体附近的台灯(向各个方向照射的光源)或者光照射到表面弯曲的物体(曲面)都属于这种情况,表面并不是被均匀照明的,表面某个点上的照明程度取决于射线和表面的角度.

     这种光叫做 *散射光(diffuse)*.


     *与弹球可以多次弹跳一样,光也可以被多次反射*,在实际中,当光照射到物体表面时,部分光被吸收,部分光会被反射(除非物体完全不反光),然后这些被反射的光照射到别的物体上(比如,生物的眼睛,因此生物才能看到这个物体),一直循环这个过程直到再也没有多余的光能够被反射.

     在这个过程中,被反射的光虽然也能照明其它物体,但并非最直接(也就是初始,没有经过"弹跳")的光源,这种间接光叫做 *环境光(ambient)*.为了更好理解,举个现实例子:

     一个房间里面打开唯一的灯,灯位于房间天花板的一个角落,这个时候大部份光都是可以确定直接来源,也就是灯；但是房间里面有一样物体的背面是没有直接被灯照到,但仍然可以看到它的背后,

     这是因为光是会像弹球那样弹跳的,比如照射到墙壁弹跳一次,弹跳到另外一个东西上,不知道经过多少次弹跳最后弹到物体的背面,最后弹跳到眼睛上,就这样被看到了.

     
     所以总结下来,按照反射的情况对光进行划分有三种光: 镜面光,散射光和环境光.


**** 材质

     物体会把照射到自己身上的光反射到我们的眼睛上,其实除了各种反射的光以外,还存在物体本身发光的可能,这种自身发出的光叫做自发光(emissive),比如汽车前灯,荧光棒等等,因此在看到一个物体的时候眼睛可能接收了4种光.

     每种光的都有各自的颜色,所以物体在眼中的颜色就是这4种光的颜色混合.


**** OpenGL 的光照模型(Lighting model)

     在开始介绍光照模型前先思考一个问题,还记得在讲坐标变换时所提到的"光照计算"吗?它到底是干什么的呢?结合上面的概念"铺垫",不能发现有一个词语从开始至今不停地出现在我们面前:颜色.

     估计你也猜到了(没猜到也没关系), *光照计算就是为了得出物体在眼中的颜色*, 也就是计算出从物体表面到眼睛的4种光的混合的颜色: $surface-color = emissive + ambient + diffuse + specular$.

     要注意,这里除了 $emissive$ 外的每一项是光和材质共同的计算结果,这很好理解:因为光照射到物体,物体把部分光反射到眼睛上,反射了多少光就得看照射的光有多少以及材质的反射程度,而自发光是没有经过反射直接到眼睛的.

     这就是 =OpenGL= 的光照模型.

*** 光线计算

    pass
