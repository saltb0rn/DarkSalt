beckmann_ndf(t, a) := %e^((cos(t)^2 - 1) / (a^2 * cos(t)^2)) / (%pi * a^2 * cos(t)^4);
ggx_ndf(t, a) := a^2 / (%pi * (cos(t)^2 * (a^2 - 1) + 1)^2);

plot2d(
  [
  beckmann_ndf(t, 0.2),
  beckmann_ndf(t, 0.4),
  beckmann_ndf(t, 0.8),
  ggx_ndf(t, 0.2),
  ggx_ndf(t, 0.4),
  ggx_ndf(t, 0.8)
  ],
  [t, -0.5 * %pi, 0.5 * %pi]);


beckmann_ndf_k(t, a) := %e^(-1 * tan(t)^2 / (2 * a^2)) / (2 * %pi * a^2 * cos(t)^4);
ggx_ndf_k(t, a) := a^2 / (cos(t)^4 * (a^2 + tan(t)^2)^2);

plot2d(
  [
  beckmann_ndf_k(t, 0.2),
  beckmann_ndf_k(t, 0.4),
  beckmann_ndf_k(t, 0.8),
  ggx_ndf_k(t, 0.2),
  ggx_ndf_k(t, 0.4),
  ggx_ndf_k(t, 0.8)
  ],
  [t, 0, 1]);


pbeck(t, a) := beckmann_ndf_k(t, a) * cos(t)^4;
pggx(t, a) := ggx_ndf_k(t, a) * cos(t)^4;

plot2d([
  pggx(t, 0.2),
  pggx(t, 0.4),
  pggx(t, 0.8)
  ],
  [t, -0.5, 0.5]
  );

plot2d([
  pbeck(t, 0.2),
  pbeck(t, 0.4),
  pbeck(t, 0.8)
  ],
  [t, -0.5, 0.5]
  );


/* From ChatGPT: How to use plot a 2D probability density function with using Maxima */
/* Define PDF */
sigma_x: 1; /* Standard deviation for x */
sigma_y: 1; /* Standard deviation for y */
f(x, y) := (1/(2*%pi*sigma_x*sigma_y)) * exp(-(x^2/(2*sigma_x^2) + y^2/(2*sigma_y^2)));

/* Plot the 2D PDF */
plot3d(f(x, y), [x, -3, 3], [y, -3, 3]);
