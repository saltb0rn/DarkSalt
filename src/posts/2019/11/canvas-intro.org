#+title: Canvas入门而不入土
#+date: 2019-11-25
#+index: Canvas入门而不入土
#+tags: HTMLCanvas
#+begin_abstract
从 =Canvas= 的一些相关概念去入门,对 =Canvas= 的 =API= 有一个全局的理解.

这片文章并非是关于 =API= 的详细用法,而是让你用Canvas画图的时候会想有没有这种功能的API,然后自行去查阅文档.

可能有人会问: 不讲 =API= 的话这篇文章还有什么存在意义吗?

针对这个问题,我想那些有开发经验的人应该会理解,比如做 =WEB= 服务端开发,有时候被要求换一个框架,即便如此他们依然可以很快上手,

这是因为 =WEB= 的服务端开发是离不开 =Cookies,Request/Response-Headers, Request/Response-Body= 等等这些 =HTTP= 的知识以及概念,

不同框架 =API= 是肯定不一样的,有经验的开发人员要快速使用新的工具必然是从这些概念上去找对应的 =API= 的.

同样, =Canvas= 也是一样,谁知道以后 =Canvas= 的 =API= 会不会变呢,或许它的 =Canvas= 的某些概念会变,但是绝对比不上 =API= 的变化速度,

因为概念变了, =API= 也必然会变,但反过来就不一定,有可能只是单纯的为了少传两个参数而再封装一下,或者为了方便改变一下用法而已.

但是核心还是那一套概念.并不是说懂概念就是精通 =Canvas=,毕竟写代码是一件需要动手的事情,只是在动手之前对做的事情进行了解会让自己在之后的编码不会"迷茫".

这是为了防止秃头了还没学会,这也是我标题意思:单纯的入门,而不是乱敲一遍什么都不会然后入土.

当然我也会在相关话题下给出相关 =API= 链接,方便边读边动手.
#+end_abstract

*** 什么是 Canvas

    =Canvas= 是 =HTML5= 标准里面的一个元素,最早是 =Apple= 的 =Webkit= 实现的一个功能,它能够作为绘制 =2D= 图像以及 =3D= 图形的一个上下文,

    简单点就是画布,根据绘制的内容类型不一样,它也分为两种: =2D Canvas= 和 =3D Canvas=,由于 =3D Canvas= 需要 =WebGL= 进行绘制,

    并且 =WebGL= 在这块的占比比较大, =Canvas= 的 =API= 使用较少,所以文中的主要内容是关于 =2D Canvas= 的概念, =3D Canvas= 我会留到在以后的 =OpenGL= 学习中提一下.

    当然,并非说 =2D Canvas= 只能画 =2D=, =3D= 显示到屏幕上也只是 =2D= 而已,把东西显示到屏幕上这个过程叫做渲染,

    使用 =2D Canvas= 绘制 =3D= 是需要 CPU 参与主要运作的,这种叫做软件渲染(software rendering),

    而使用 =3D Canvas= 的核心则是使用 WebGL 进行渲染,本质就是调用 GPU,这有多个叫法:硬件加速渲染/硬件渲染/硬件加速(hardware rendering / hardware acceleration).

    其实按照计算的本质而言,软件渲染的计算过程于硬件渲染的是一样的,这也是 3D 引擎的基本原理,在不久之后我就会写一篇自学 OpenGL 的笔记,到时候就会通过 JS 实现一个简单的 3D 引擎.

    不过这是题外话了,本文的重心还是 =2D Canvas=.

*** 2D Canvas 所支持的图元(primitive)

    什么是图元,图元就是基本/最小单元的图形,只能通过它们来组成更加复杂的图形.基本上绘图程序或者与绘图有关的都有这个概念,比如 =OpenGL=.

    而 =2D Canvas= 支持两种图元: 矩形(rectangle)以及路径(path).

    路径本质就是一系列由线(不一定是直线,可以是曲线)连接起来的点,在 =2D Canvas= 中画复杂的图形基本上都是靠它来完成.

*** 2D Canvas 的坐标系统(coordinate space)/网格(grid)

    [[https://mdn.mozillademos.org/files/224/Canvas_default_grid.png]]

    左上角顶部就是 =Canvas= 的原点坐标(origin) =(0,0)=,坐标轴上的一个单元就是一个像素.

    但这些不是绝对的,原点坐标是可以变换(translate)成其它位置的,网格(grid)也可以翻转,甚至缩放(scale).

*** 2D Canvas 的画图流程

    你需要把绘图流程想像成移动一支画笔(pen/pencil)在白纸上(canvas)上进行绘画:

    1. 把画笔移动到某个坐标点上;
    2. 连线到某个目的坐标上,线可以是直线或者曲线;此外可以选择线的样式,宽度,连接处等等.
    3. 第1和第2步,直到路径走完;
    4. 选择填充(fill),或者笔画(stroke),有或者修剪(clip)三类类动作.
       其中填充会自动连接起点和终点,形成闭合,然后填充颜色;
       笔画则是勾画出路径,可以选择颜色等等;
       而修剪则是把路径闭合外的区域变为不可视,也就是一个遮罩.


    连线以及路径的API比较重要,可以看成其他API都是这个的具体化(Specificalization).

    一些数学知识:

    - 弧度,角度以及角速度

      对于曲线连线部分的 API 要经常使用弧度(radians)作为参数,而弧度往往没有角度(degrees)那么直观,

      所以需要掌握两者之间的转换: $radians = Math.PI / 180 * degrees$.单位 rad

      一圈是 360 度,所以一圈的弧度等于 $Math.PI / 180 * 360 = 2 * Math.PI$,

      角速度就是在单位时间(这里暂时以秒作为单位)内转动的角度,假设现在一分钟转动了一圈, $360 / 60 = 6 deg/s$,

      但由于 Canvas 使用的是弧度为单位,所以要转化一下 $2 * Math.PI / 60 rad/s$.


    - 贝塞尔曲线(Bezier curves)

      Canvas只实现了两种贝塞尔曲线:二次(quadratic curves)以及三次贝塞尔曲线.

      了解一下贝塞尔曲线原理有助于明白贝塞尔曲线怎么工作的

      https://javascript.info/bezier-curve

*** 2D Canvas 的文本绘制

    Canvas 支持文本的绘制,当然不是通过路径绘制出来的,而是真正的处理文本.

    同样可以使用填充以及笔画两个动作,前者绘制出来的是实心字,后者是空心字,只有轮廓.

    此外还能够设置字体的样式,包括字体颜色,大小以及对齐方式.

    Canvas 甚至能够检测文本的宽度,这对于不同语言的文本做适配是十分有用的功能.

    重点要掌握的是理解[[https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline][文本基线的参数]]以及[[https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign][文本对齐的参数]].

*** 2D Canvas 的图片绘制

    Canvas 能够直接使用现有的图片进行绘制,除了图片以外,还能以视频和别的 Canvas 作为图源.

    同时也可以对图片进行一些操作: 缩放(scaling)以及切片(slicing);

    - 缩放只要在绘图前指定好生成图片的大小,所以需要三个参数: 图源,位置坐标以及图片大小;
    - 切片则是需要从图源的指定位置开始切指定大小,然后复制到Canvas的指定位置上以及进行缩放,所以需要9个参数:
      图源,图源切片位置,切片大小,Canvas绘图位置坐标以及绘图大小.

      
    由于 Canvas 支持视频作为图源,所以这也让 Canvas 拥有了一定编辑视频的能力,在本文最后会给出一些 Canvas 的实践例子,

    其中就有如何利用 Canvas 实现绿幕效果(green screen effect).

*** 2D Canvas 状态管理

    =Canvas= 支持一套状态管理方案,多个状态是通过栈来维护的:保存(save)一次状态就入栈,恢复(restore)一次就出栈.

    一个状态由变换设置,Canvas的图片/文字/线条属性的设置以及修剪路径(clipping path)三个部分组成.

    在绘制复杂图像的情况下,这个机制十分有用,比如频繁切换填充或者画笔的颜色.

    要注意的是这些状态都是针对 =Canvas= 本身的,并非针对 =Canvas= 上面的内容.

*** 2D Canvas 变形 (Transform)

    变形有3种类型: =translating, rotating 以及 scaling=.

    - =translating= 是指设定 =Canvas= 坐标新的原点;
    - =rotating= 是指基于 =Canvas= 的原点顺时针方向(clockwise)旋转指定角度;
    - =scaling= 是对 =Canvas= 里面的单位进行缩放.


    流程是先变形然后绘图,变形之前已经绘制好的内容不会被改变.

*** 2D Canvas 组合 (compositing) 和修剪 (clipping)

    =Canvas= 除了支持在现有图形后面画图外,还可以支持使用现有图形作为遮罩层来遮罩(mask off)某个区域/清除某个部分,等等.

    在状态管理里面提到过, =Canvas= 的修剪路径也是状态的一种,结合路径可以调整出 =Canvas= 的可视区域.

    =clip= 工具就是这里的主角.

*** 2D Canvas 动画

    Canvas 可以用来绘制动画,就是实现动画的原理,具体步骤如下:

    1. 清除 Canvas 上面的(部分或者所有)内容;
    2. 保存 Canvas 的状态,因为 Canvas 的状态是全局的,为了不影响上下文,随时恢复状态是必须要准备的;
    3. 绘制帧(不一定是整个画面的帧,可以是某个图形);
    4. 恢复 Canvas 的状态;
    5. 1-4 步骤是绘画一帧,重复这个过程.


    在第 5 步中需要一个调度器来重复绘帧,在浏览器中有三个选择:

    - window.setInterval: 每隔一段时间执行一次回调.
    - window.setTimeout: 在一段时间后执行一次回调.
    - window.requestAnimationFrame: 浏览器专门用于执行动画,在绘制下一帧之前执行一尺回调,
    一般动画的帧率是 60fps,所以在理想状态下一秒内会执行60次回调.


    这三者各有所长

    - window.setInterval 比较适合于避免干扰用户的情况(用户不需要交互),但这种不太好控制动画的播放;
    - window.setTimeout 比较适合于用户可以交互的情况,比如游戏开发中按键事件,通过事件监听判断是否播放动画;
    - window.requestAnimationFrame 大部分浏览器生产商都针对过它进行优化,
      在后台运行的网页标签 tab (也就是非当前标签)或者隐藏的 =<iframe>= 中运行会被暂停,
      可以有效节省资源.同样支持上面两者的优点.

*** 2D Canvas 操作像素

    Canvas 也支持从像素层对图像进行操作, 可以直接通过 Canvas 对象获取到 Canvas 内容的像素数据,

    是一个 [[https://developer.mozilla.org/en-US/docs/Web/API/ImageData][ImageData]] 对象,只包含三个可读属性: =width, height 以及 data=,分别对应 Canvas 的宽度,高度以及图像的数据.

    =data= 属性是一个 [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray][Unit8ClampedArray]] 对象,从它的名字可以看出它是一个由任意个范围从 0 到 255 (包括)的整数组成的数组,

    也就是由若干个字节组成的数组,和大多数数组一样,索引也是从 0 开始(俗称 zero-based index),

    Canvas 是(默认)采用 32 位深度色彩,也即是 RGBA 格式,就是一个像素由 4 个字节表示,

    分别代表红色(red),绿色(green),蓝色(blue)以及透明度(alpha), PNG 就是这种格式.

    所以一个 Canvas 的图像数据大小为 $\left(width * height * 4\right)bytes$,也就是 =data= 属性的长度就是这个.

    以上就是 Canvas 内容的像素表示结构,接下来会列出一些常见的对像素操作.

    - 反色

      (这里采用10进制来进行描述,你可以不用转化成十进制,任何进制都可以,或者直接用16进制算也行,这里是为了方便接上 [[https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas][MDN]] 的教程,它上面就是用十进制讲解的).

      反色的其实就是用255分别减去像素的RGB值重新得到的一个像素(如果不理解为什么是255的话请继续阅读上面),

      比如我们拿到一个颜色的 hex code 为 ca0c16,它转化为 RGB 的十进制为 $\left(202, 12, 22\right)$,

      关于怎么计算其实很简单,为了不影响阅读就在这里大概提一下.

      首先这是一个6位的16进制,一个16进位等于4个二进制位,所以 $\left(6 * 4\right) = 24$,也就24位深颜色.

      一个字节是 8 位,所以这里是 3 个字节,分别代表 RGB 三个颜色,大概理解后就可以得出它的反色为:

      $\left(255-202, 255-12, 255-22\right) = \left(53, 243, 233\right) = 35f3e9$.

    - 灰阶缩放

      有两种实现方法(更详细信息的需要自行阅读其它资料):

      1. 计算出 RGB 三个值的平均值 avg,那么这个像素的灰阶处理后的 RGB 就是 $\left(avg, avg, avg\right)$.

      2. RGB 转换成 YUV,计算方法为 $avg_{weighted} = 0.299R + 0.587G + 0.114B$,那么处理得到的像素 RGB 为 $\left(avg_{weighted}, avg_{weighted}, avg_{weighted}\right)$







*** 2D Canvas 点击域

*** 2D Canvas 优化

    这里就不赘述了,详细看[[https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas][这里]].

*** 2D Canvas 实践例子

    这些例子都是来自 MDN 的,左边是教程地址,右边是教程完整代码.

    - [[https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/A_basic_ray-caster][使用软件渲染的一个 3D 场景]]: https://github.com/mdn/canvas-raycaster
    - [[https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Manipulating_video_using_canvas][实现视频绿幕效果]]: https://github.com/mdn/dom-examples/tree/master/canvas/chroma-keying
    

*** 结论

    数学还是蛮重要的
