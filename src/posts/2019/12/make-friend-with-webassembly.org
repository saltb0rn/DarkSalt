#+title: 主动认识 WebAssembly
#+date: 2019-12-18
#+index: 主动认识 WebAssembly
#+status: wd
#+tags: WebAssembly
#+begin_abstract
WebAssembly 是我刚开始接触前端时最想学的技术之一,另外的还有 WebGL,刚好 WebGL 和 WebAssembly 有着不少联系,

两门技术我都"觊觎"好久了,现在也接近过年了,干脆在假期里面把这两个都学了.
#+end_abstract

*** 什么是 WebAssembly

    [[https://webassembly.github.io/spec/core/intro/index.html][WebAssembly]] 实际上是一套针对于字节码(bytecode)的规范,可能有人不知道字节码是做什么的,

    这里要大概先了解一下一门编译型语言的编译过程,编译的过程实际就是一门语言翻译成另外一门语言,这另外一门语言通常是汇编(assembly),

    比如 C 语言编译成汇编语言, C++ 也可以编译成汇编语言等等,实际上很多语言都可以编译成汇编语言,

    这样实现 n 门语言 X 到汇编的语言需要实现 n 个编译器,为了减少工作量以及实现一个编译器支持编译多门语言,

    人们想出了先编译到一个中间层表示(Intermediate Representation),然后再从中间层表示编译到汇编,在规范好中间层以后,只需要实现从语言到中间层的过程就好了,

    中间层到汇编永远只有一种可能.而这个中间层一般都是字节码.而对于 Web 来说,只需要把这段字节码作为"汇编"就足以,最后还需要一个能跑这段字节码的虚拟机.

    这估计也就是 WebAssembly 名字的来源吧.

    目前 WebAssembly 已经是 W3C 的标准了,官方工具是 [[https://emscripten.org/docs/introducing_emscripten/about_emscripten.html][EmScripten]],把别的语言源代码编译成 =.js + .wasm=,也可能是 =.html= 等等.

    WebAssembly 有两种格式: 二进制格式(binary format)和文本格式(text format),其中二进制格式的文件格式为 =.wasm=,文本格式的文件格式为 =.wat=.

    官方有一套[[https://github.com/WebAssembly/wabt.][工具]]针对二进制格式经行转换.

    WebAssembly 并非是 Web 限定的,它完全可以在 Web 以外的环境运行.


**** asm.js

     在 WebAssembly 的时间点之前有一个叫做 [[http://asmjs.org/][asm.js]] 的语言,由 Mozilla 研发,通过把 C/C++ 代码编译成 asm.js,然后浏览器执行,

     asm.js 是 JavaScript 的一个子集,但多了 Type Checking 以及少了 GC, 同样也可以在浏览器上跑 C/C++ 的应用,然而在执行过程中比 WebAssembly 多了几步:

     解析得出 AST; 编译成字节码的过程; 字节码编译成 asm.js.导致效率上比 WebAssembly 低了好多,因此 WebAssembly 取得了胜利.

     即便如此, asm.js 也是一个值得敬畏的技术,目前依然在发展中.


*** 笔记的思路

    这篇笔记剩下的内容可能会比较多,难度也不太一样,本人笔记的思路是从浅到深,从最基础的 Emscripten 使用到读懂 WebAssembly 规范.

    如果只是学会如何使用 WebAssembly 的话,基础部分就够了,可了解细节也是一件很诱人的事情,所以具体就看读者个人安排了.

    因为 API 是概念的具象化,所以先从 WebAssembly 相关概念入手.


*** 个人学习心得

    WebAssembly 就是一个 [[http://llvm.org/pubs/2003-10-01-LLVA.pdf][Virtual ISA]].

    这里只是针对于个人的学习经历来写的,可能不太符合官方推荐的方法,根据[[https://webassembly.github.io/spec/core/intro/index.html][WebAssembly规范]]学习,这和大部分人学习一门新的语言不太一样,

    由于使用 WebAssembly 的方法很多,其中 C/C++ 代码编译成 WebAssembly 的方法是最常用/主流的.最开始本人就是从这种方法开始的,

    跟着 [[https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts][MDN WebAssembly]] 教程实践,不过随之而来会出现很多疑问,主要原因是对 WebAssembly 本身不太了解,不是说 MDN 的教程不好,

    而是入门教程都是这样经过简化.这个时候我就开始阅读 WebAssembly 的规范,刚才也说了这和大部分人学习一门编程语言不太一样,

    根据语言的规范学习一门语言,先要能够读懂这门语言的语义描述文档,这样才能知道语言本身是怎么运行(运算),也就是这个语法代表着的运算过程.

    WebAssembly 是基于 Stack Machine 模型进行计算的,抽象机(abstract)的机器状态(machine state)是 =(store, frame, instruction*)=.

    

    

    

    由于 WebAssembly 还在继续发展,它的内容也在不断改变,对应的概念也是一样,因此会特地标明版本,如果有变化还会更新.


**** 概念

     - 值(values)

       WebAssembly 只提供 4 种基本类型值: 整数(integers)和[[https://ieeexplore.ieee.org/document/8766229][IEEE 754-2019]]数(也就是浮点数),各都有 32-bit 和 64-bit 宽.

       其中, 32-bit 整数还可以作为 Booleans 和内存地址 (memory address).可以对这些值做正常的操作,包括全矩阵转换.

       有符号和无符号整数之间的表示(两部分表示)没有区别,它们会被操作符自动解析成有符号或者无符号.

     - 指令(Instructions/instr)

       WebAssembly 的计算模型是基于 Stack Machine.代码是由指令序列组成,按照顺序执行.

       指令分为两大类: 操作值的普通指令(simple/plain instructions)和修改控制流的控制指令(control instructions).

       值被储存在一个操作对象栈上(operand stack)上,普通指令会从栈上弹出(pop)值进行计算,然后把计算结果推进(push)栈里.

     - 陷阱/异常(Traps)

       在某些情况下,某些指令可能会产生一个陷阱,陷阱会终止执行,并且不能在 WebAssembly 代码里面被处理,但可以被外部环境捕获到并且可以处理.

     - 函数(Functions)

       就和其他编程语言的函数一样,没啥可说的.

     - 表格(Tables)

       表格是一个包含了特定元素类型的数组,这些特别元素的值都不透明(opaque),程序可以通过索引操作间接获取里面的值.

       目前支持的元素类型是无类型函数引用(untyped function reference).

     - 线性内存(Linear Memory)

       一个线性内存是一个连续,可以改变的字节数组,就像一个内存以初始大小创建,然后动态增长.

       程序可以在线性内存上的任意字节地址(包括未对齐的地址)上存和取值,存和取可以指定比基本类型的基本储存大小还要小.

       访问当前内存边界以外的地址会出现陷阱.

     - 模块(Modules)

       一个 WebAssembly 二进制文件,包含了函数/表格/线性内存以及可变/不可变的全局变量的定义.

       可以通过指定一个模块/名字对(module/name pair)以及一个合适的类型(suitable type)来从外部导入(import)定义.

       同样定义也可以被导出到别的模块中.除了定义之外,模块还可以以 segments 的形式为它的内存或者表格定义初始数据.

       还可以定义一个指定执行的开始函数(start function).

     - 嵌入器(Embedder)

       一个 WebAssembly 实现,一般被嵌入到宿主环境(host environment,比如浏览器)中,这个环境规定了如何初始化导入的模块,

       如何提供 imports,以及如何访问 exports.具体内容要看具体宿主环境.



**** 语义阶段

     1. 解码

        WebAssembly 模块会以二进制格式发布,解码处理就是把模块转化成内部表示(internal representation),

        在规范中,该表示形式是以抽象语法模型,在现实中则可能是直接编译成机器码.

     2. 验证

        被解码的模块在执行之前必须要经过验证,这个过程需要检查一系列符合要求的条件保证是有意义以及安全的.

        给函数以及函数体内执行一系列类型检测,保证操作对象栈一致.
      
     3. 执行

        经过检验过后就可以执行了,执行是在宿主环境中发生的,执行还可以分为两个阶段:

        1. 实例化(Instantiation)

           模块实例就是模块的动态表示(dynamic representation),拥有它自己的执行栈(execution stack),

           实例化会执行模块体自己本身,所有导入的定义,全局定义,内存以及表格,并且如果有定义的化就激活模块的开始函数(start function).

           最后返回模块导出(exports)的实例.

        2. 激活(Invocation)

           一旦实例化完成,可以在后续通过激活(invoke)模块实例导出的函数来实行 WebAssembly 计算.

           给对应的函数提供要求的参数,执行然后返回结果.

     







**** 掌握

**** 1.1

     - 模块(Module): 一个已经被浏览器编译为可执行机器码的 WebAssembly 二进制代码 (WebAssembly binary, 文件格式是 .wasm).模块没有状态,因此可以简单地在 windows 和 workers 之间共享.声明模块的 imports 和 exports 就像一个 ES2015 模块那样.

     - 内存(Memory): 可伸缩,线性的(连续的)字节数组,通过 WebAssembly 低级的内存访问指令进行读写.

     - 表格(Table): 可伸缩,带类型的数组,用于储存不能以字节形式(raw bytes)储存的对象的引用,比如函数(functions),这是出于安全性和移植性的考虑.

     - 实例(Instance): 一个模块加上在运行时期间它所使用到的状态,包括内存,表格以及被导入的值的集合.实例和一个被加载到特定全局的 ES2015 模块一样.


     JavaScript API 提供了创建上面对象的能力,在有了一个实例的情况下,可以在 JavaScript 代码中同步调用实例提供的导入内容,这些内容和平常的 JavaScript 函数一样暴露出来.

     而 WebAssembly 代码也可以同步调用任意的 JavaScript 函数,只要把这些 JavaScript 函数作为实例的导入就可以了.

     因为 JavaScript 可以掌握了 WebAssembly 下载/编译/运行的方式,开发者可以把 WebAssembly 看做一个 JavaScript 特性.

     目前 WebAsssembly 还不能像 ES2015 模块那样通过 =<script type="module">= 加载,不过这个已经在计划上了.



*** Emscripten 的使用

    整体的工作流就是, =C/C++= 代码通过 Emscripten 编译得到 =.wasm= 模块,也就是 WebAssembly 二进制文件,然后通过 JavaScript 调用模块.

    关于 Emscripten 的安装和使用请自行到[[https://emscripten.org/docs/getting_started/downloads.html][官方]]地址上阅读,这里多插一句,本人是 Linux 用户,用的发行版是 Ubuntu,虽然 apt 支持直接安装 Emscripten,

    但是由于 sdk 的配置问题,个人还是推荐按照官方的安装方法,不过要注意的是按照官方的做法最好在 bash 的配置文件 =.bashrc= 上添加以下内容:

    #+BEGIN_SRC sh
    . <pathTo>/emsdk/emsdk_env.sh
    emsdk activate latest
    #+END_SRC

    这可以让你不用每次重新打开 bash 使用 emcc 前都要手动激活 Emscripten 的配置. Windows 用户以及 Mac 用户同样也要注意这个问题,尽管解决方法不一样.


**** 从 C/C++ 到 WebAssembly

     源代码如下:

     #+BEGIN_SRC c
     /* hello.c */
     #include <stdio.h>
     #include <emscripten/emscripten.h>

     int main(int argc, char ** argv) {
         printf("Hello, world!\n");
     }


     #ifdef __cplusplus
     extern "C" {
     #endif

         void EMSCRIPTEN_KEEPALIVE myFunction(int argc, char ** argv) {
             printf("MyFunction Called!\n");
         }

     #ifdef __cplusplus
     }
     #endif
     #+END_SRC

     先说明一下 Emscripten 编译得到代码, Emscripten 默认只会调用 main() 函数, main() 以外的函数都会被认为是无用的代码被优化(消除)掉.

     为了让 Emscripten 知道这个函数是有用的,必须要在函数定义的时候在函数名字前加上 =EMSCRIPTEN_KEEPALIVE=,这需要导入 =emscripten.h= 库.

     对于不太熟悉 =C/C++= 的读者,这里的例子 hello.c 中有几个东西需要注意一下:

     1. =__cplusplus= 是 C++ 标准的宏定义,可以用来判断编译器是否支持 =C++=.这里也用来实现 C/C++ 混编.

     2. C 和 C++ 的命名管理方式不一样, C++ 支持函数重载,也就是函数是以 =函数名字+参数(类型,个数,顺序)+返回值类型= 作为唯一标识,

        也就是说 C++ 支持多个同名函数共存, C 语言不存在这样的机制,所以这里需要 [[https://docs.microsoft.com/en-us/cpp/cpp/extern-cpp?view=vs-2019][extern "C"]] 配合 =__cplusplus= 解决这份代码可能会以 C++ 使用时候编译出错的情况.


     最简单的编译操作如下:

     #+BEGIN_SRC sh
     emcc hello.c
     #+END_SRC

     会得到两个文件: =a.out.js= 和 =a.out.wasm=.

     =a.out.wasm= 就是 模块文件, =a.out.js= 就是 =C= 和 =JavaScript/wasm= 之间的耦合代码.而 =a.out.wasm= 就是我们要发布的代码.


***** 直接让 emcc 把代码编译成 .html

      #+BEGIN_SRC sh
      emcc hello.c -o hello.out.html -s "EXTRA_EXPORTED_RUNTIME_METHODS=['ccall']"
      #+END_SRC



**** 调用 WebAssembly 模块文件

