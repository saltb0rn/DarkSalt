#+title: 关于使用C语言开发的那些事
#+date: 2021-06-13
#+status: wd
#+index: 关于使用C语言开发的那些事
#+tags: C
#+begin_abstract
这篇笔记是针对C语言开发而写的,不包括C语言本身的学习,因为这方面的教材已经非常多了,这类书籍就有不少.

很多人刚学了 =C= 语言就觉得只能看得懂别人的开源项目,然而一上手就发现事情没那么简单:

构建项目都要费半天的神,到阅读代码时又发现很多"不成文的规范".

于是我决定记录一下这些零散的内容.
#+end_abstract

** 不成文的规范

*** 使用空宏解决头文件重复引入的问题

    有时候会见到这样定义头文件(header files),

    #+BEGIN_SRC c
      // example.h
      #ifndef EXAMPLE_H
      #define EXAMPLE_H
      int example_func(int, int);
      ...
      #endif
    #+END_SRC

    头文件的声明定义在 =#ifndef= 宏和 =#endif= 宏中间,并且还有一个空宏 =EXAMPLE_H=.

    =#include= 宏引入文件实际上就是把文件的内容复制到过来,于是这样定义宏的优势就出来了:

    在别的文件引入这个头文件时,就算多次引用这个头文件,也不会出现重复引入的情况:

    在第一次引入 =example.h= 时就会定义 =EXAMPLE_H=, 并且把头文件的声明复制过去;

    之后引入 =example.h= 时会检测到 =EXAMPLE_H= 已经被定义,就不会再进行复制.

    这种宏叫做守卫宏(guard macro).



*** C 与 C++ 兼容

    有时候会见到类似的代码,

    #+BEGIN_SRC c
      #include <stdio.h>
      #include <emscripten/emscripten.h>

      int main() {
          printf("Hello World\n");
      }

      #ifdef __cplusplus              /* 这里是重点 */
      extern "C" {                    /* 这里是重点 */
      #endif                          /* 这里是重点 */

      EMSCRIPTEN_KEEPALIVE void myFunction(int argc, char ** argv) {
          printf("MyFunction Called\n");
      }

      #ifdef __cplusplus              /* 这里是重点 */
      }                               /* 这里是重点 */
      #endif                          /* 这里是重点 */
    #+END_SRC

    这是 =MDN= 上一个关于 =WebAssembly= 话题的例子,重点已经在上面用注释标示出来了.

    =__cplusplus= 是 =C++= 编译器的预定义宏,也就是说在使用 =C++= 编译器时这个宏才会被定义,

    这个时候 =C++= 编译器就相当于处理这段代码,

    #+BEGIN_SRC c
      #include <stdio.h>
      #include <emscripten/emscripten.h>

      int main() {
          printf("Hello World\n");
      }

      extern "C" {                    /* 这里是重点 */
      EMSCRIPTEN_KEEPALIVE void myFunction(int argc, char ** argv) {
          printf("MyFunction Called\n");
      }
      }
    #+END_SRC

    而对于 =C= 编译器来说,就是这样,

    #+BEGIN_SRC c
      #include <stdio.h>
      #include <emscripten/emscripten.h>

      int main() {
          printf("Hello World\n");
      }

      EMSCRIPTEN_KEEPALIVE void myFunction(int argc, char ** argv) {
          printf("MyFunction Called\n");
      }
    #+END_SRC

    =extern "C" { ... }= 的作用是为了解决 =C= 和 =C++= 两者命名管理规则不一样的问题.

    =C= 是一门采用单一命名空间的语言,实际上这个特点是"遗传"汇编语言的: 一个汇编程序里面的全局标签的名字是唯一的.

    =C= 里面的 =extern= 修饰(默认)的变量/函数就是汇编里面的全局标签.

    而 =C++= 就比较复杂, =C++= 支持有多个同名但函数签名(function signature)不一样的函数,这就是传说中的函数重载(function overloading).

    =C++= 的函数签名由这三个要素构成: 函数名字,函数的返回值,函数接受的参数数量以及类型.

    =C++= 里面两个函数只有在函数签名一致才会认为被认为是同一个函数,这个时候编译器会告诉你重复定义了这个函数.

    为了不让 =myFunction= 在 =C++= 被重载而无法正常工作,才会使用 =extern "C" { }=.

    我本人对 =C++= 的兴趣和了解都不多,因此就不继续深入笔记了,只要记得 =extern "C" { }= 是为了兼容 =C= 和 =C++= 就好.


*** 项目里面的 shell script 文件: configure

    很新手上手 =C= 项目构建都会使用到 =make= 命令,都要编写 =Makefile= 文件进行构建.

    =Makefile= 告诉 =make= 命令如何进行编译和链接,一旦工程里面有依赖的文件发生了变化,

    再度执行 =make= 命令就会对必要的文件进行重新编译和链接.

    \\

    很多 =C= 程序的源代码是可以在不同平台上编译运行的,然而在不同平台上进行构建是不一样的.

    比如说使用的编译器不一样;链接器不一样;就算使用同一种编译器,可能编译参数也是不一样等等.

    总的来说,在不同平台上进行构建,那么要针对该平台来调整 =Makefile= 文件.

    在1991年,一位叫做 =David J. MacKenzie= 的开发人员因为要经常为20个平台修改 =Makefile= 文件而写了一个叫做 =configure= 的脚本文件,

    这个脚本文件会自动根据平台来生成 =Makefile= 文件,然后开发人员运行 =./configure && make= 就可以构建程序了.

    这套流程后来被 =GNU= 标准化了: 每一个 =GNU= 的包都应该有一个 =configure= 脚本,该脚本至少要支持什么参数,它生成的 =Makefile= 遵守一定的规范,

    在最简单的情况下执行 =./configure && make && make install= 就可以对包进行构建.

    这套流程叫做 =GNU= 构建系统(GNU Build System),后来很多 =GNU= 以外的程序也采用这套构建系统.

    只要懂了这套构建系统,大部分开源项目的结构就很好懂.

    了解 =configure= 脚本的产生是学习这套构建系统一个好起点.

    \\

    手动编写 =configure= 脚本同样不是一件轻松的事情,

    为此 =GNU= 开发了一套叫做 =Autotools= 的工具链,帮助开发人员快速为自己的项目搭建这套构建系统.

    =Autoconf= 和 =Automake= 是这套工具链中比较重要的两个工具.

    这两个工具都需要根据开发人员编写好的一些"配置"文件来生成文件:

    =Autoconf= 需要根据一个叫做 =configure.ac= 的文件来生成 =configure= 文件,有时候 =configure.ac= 也叫做 =configure.in=;

    =Automake= 通过 =configure.ac= 来找到 =Makefile.am= 文件,再根据 =Makefile.am= 文件生成对应的 =Makefile.in= 文件;

    =configure= 脚本需要读取 =Makefile.in= 来生成 =Makefile=.

    =configure.ac= 原本叫做 =configure.in=, =*.in= 文件是用来生成文本文件的是模板,

    =Makefile.am= 文件 *基本* 上就是一系列 =Makefile= 的变量定义以及一些 =Makefile= 规则定义,

    在 =Automake= 生成 =Makefile.in= 时,这些定义会被复制到 =Makefile.in= 里面.

    在文本处理上, =Autotools= 使用了宏(macros)这个东西,想要知道如何理解,甚至编写模板,就得学习 [[https://www.gnu.org/software/autoconf/manual/autoconf.html#Autoconf-Macro-Index][Autoconf]] 和 [[https://www.gnu.org/software/automake/manual/automake.html#Macro-Index][Automake]] 所支持的宏.

    实践部分就不在这里总结了,毕竟官方文档就写得很详细,而且文档上更新太快了,完全没总结的必要,

    建议直接从 [[https://www.gnu.org/software/automake/manual/automake.html#Hello-World][Hello World]] 开始,并且阅读关于 =configure.ac= 以及 =Makefile.am= 文件的配置解释.


*** 静态链接库 (static library)

    

*** 动态链接库 (dynamic library/shared library)

