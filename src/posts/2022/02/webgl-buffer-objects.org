#+title: WebGL的Buffer对象
#+date: 2022-02-11
#+index: WebGL的Buffer对象
#+tags: WebGL
#+begin_abstract
由于去年换了工作, 生活变得充实起来了, 这里的充实并非反话, 我在这段时间调整了心态和目标, 学习了一些新的知识;

为了学习游戏开发, 定制了新的学习目标, 包括音乐, 编剧, 使用 =Blender= 建模以及 =Godot= 的使用等等;

身边遇到了不少好人; 当然了, 也有一些不顺心的事情, 但总体上来说是偏好的.

也因为这样, 图形学学习计划搁置了一年, 当我重新捡起来的时候发现了一些需要加强理解的地方:

=OpenGL/WebGL= 上下文(OpenGL/WebGL Context), 也就是 =GPU=, 是如何接收,储存以及使用数据.

了解这个过程才能真正理解 =shader code= 之前是如何工作的.
#+end_abstract

*** WebGL是如何工作的

    https://webglfundamentals.org/webgl/lessons/webgl-how-it-works.html

    https://webgl2fundamentals.org/webgl/lessons/webgl-how-it-works.html

    # https://iquilezles.org/articles/


*** OpenGL/WebGL 上下文是如何储存数据

    首先, =OpenGL/WebGL= 上下文会等 =CPU= 把数据传送过来, 在接收到数据后, 数据会被储存在缓冲区(buffers)上.

    我们以 =WebGL= 为例子 (=OpenGL= 其实也差不了太多), 设现有一个名为 =gl= 的 =WebGL= 上下文实例, 要完成上述过程需要进行以下操作:

    #+BEGIN_SRC javascript
    // 告诉 GPU 创建好缓冲区,用于后续储存 CPU 发过来的数据
    let buffer = gl.createBuffer();

    // 绑定缓冲区,因为 GPU 可以有不止一个缓冲区,所以需要告诉 GPU 接下来要对哪个缓冲区进行填充数据.
    gl.bindBuffer(target, buffer);

    // 往前面绑定的缓冲区里填充数据,最近一次绑定的缓冲区是哪个,就往它里面填充,这一步换句话说就是储存 CPU 发过来的数据 data 了.
    gl.bufferData(target, data, usage);
    #+END_SRC

    由于数据的用途的不同, 缓冲区可以分为很多种类型, 在绑定的时候就需要指定了, 也就是上面代码里面的 =target= 变量.

    想要知道 =target= 的值能够是什么, 可以参考[[https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer][这里]], 这些方法的参考说明都可以在[[https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext][这里]]找到.

    在 =OpenGL/WebGL= 里面, 这些用来作为物体顶点信息的缓冲区叫做 =Vertex Buffer Object (VBO)=.

    一旦有了数据源, 就可以让 =GPU= 根据利用这些数据来渲染了.

    实际上, 除了这些用作几何图形的数据以外, 还有其他的数据并非存到缓冲区里面的, 后面介绍这些数据.


*** <<section-3>>OpenGL/WebGL 上下文是如何使用数据

    首先需要提及的一点是, =GPU= 并非直接使用缓冲区来进行渲染, 在说明这点之前, 我们先来明白一个概念.

    =VBO= 里面的数据格式不是固定的, 比如渲染一个三角形, 它的顶点数据格式可能是这样的:

    #+BEGIN_SRC c
    { x1, y1, z1, x2, y2, z2, x3, y3, z3 }
    #+END_SRC

    也可能是这样的:

    #+BEGIN_SRC c
    { x1, y1, z1, w1, x2, y2, z2, w2, x3, y3, z3, w3 }
    #+END_SRC

    当然还有其它的可能.

    那么问题来了, 既然数据格式不一样, =GPU= 是如何读取这些数据才能渲染出一个三角形的呢?

    这需要开发人员告诉 =GPU= 如何读取数据, 这里要看一下 =gl.vertexAttribPointer(index, size, type, normalized, stride, offset)= 这个 API,

    #+CAPTION: vertexAttribPointer
    [[../../../files/glVertexAttribPointer-api-overview.png]]

    这张图里面可以看到另外一种数据格式, 既有顶点坐标(xyz), 还有顶点颜色(rgb)以及其对应的纹理坐标(st), 这里就把这三种数据的集合体看作是一个顶点(每 3 种为一个顶点).

    正如前面说所说的, 顶点的信息不是固定的, 实际上还能会存在别的数据, 比如说法线向量, 又或者它们的排序不同于上图.

    这样做的好处是, 顶点的所有相关数据都储存在一个缓冲区里面, 只读取其某个属性的话(比如顶点颜色)只需要调用 =gl.vertexAttribPointer()= 来新建一个指针来读取即可, 不需要重新创建一个缓冲区来专门储存颜色数据.

    =gl.vertexAttribPointer= 的 =index= 参数是 =shader= 程序(shader program)里面 =attribute= 变量的索引值, 可以手动指定, 也可以通过 =gl.getAttribLocation(shaderProgram, attribName)= 来获取.

    在 =gl.bindBuffer(target, buffer)= 之后调用 =gl.vertexAttribPointer= 就可以把缓冲区里的数据填充到指定的 =attribute= 变量里面,

    这些变量可以在 =GLSL= 里面被引用.


*** GLSL 变量修饰符(Variable Qualifiers / Type Qualifiers)

    和其他编程语言一样, =GLSL= 的变量也是一样有修饰符的, 这里的修饰符并非指 =int=, =float= 这些 [[https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)][类型标识]];

    而是指控制变量的储存以及行为的标识, 这么说可能有点不太好理解, 举个例子 "禁止变量在声明后被修改" 的 =const= 就是其中一个修饰符.

    我们都知道 =GLSL= 的工作内容并不完全像其他编程语言一样, 它的任务是控制图形渲染的, 而这项任务的流程是分成好几个阶段的,

    有些数据可以在所有阶段中都能访问到, 而有些数据只能在特定阶段中访问, 还有一些数据能够从这个阶段输出到下一个阶段.

    为了标识变量能够在哪些阶段使用, 就需要另外一种 [[https://www.khronos.org/opengl/wiki/Type_Qualifier_(GLSL)][修饰符]] 进行声明, 这些修饰符就是这一小节的重点.

    这里稍微提一下 =OpenGL= 的版本并非和它所支持的 =GLSL= 版本对应的, 也就是 =OpenGL 2.0= 所支持的 =GLSL= 版本并非 =2.0=, 具体可以看 [[https://www.khronos.org/opengl/wiki/Core_Language_(GLSL)#Version][OpenGL and GLSL Version]],

    而不同版本的 =GLSL= 所支持的修饰符是不一定的.

    需要注意的是, [[https://www.khronos.org/registry/webgl/specs/1.0/#4.3][WebGL 规范]] 是基于 =OpenGL ES 2.0= 的, 而 =WebGL= 必须支持 =OpenGL ES 1.00= 版本的着色器语言(Shading Language).

    整体上来说, =WebGL= 的 =GLSL= 比起 =OpenGL= 的 =GLSL= 的版本要低, 而 =OpenGL= 的 =GLSL= 的一些修饰符已被废弃的, 这些已被废弃的修饰符还活跃在 =WebGL= 的 =GLSL= 上,

    因此, 我们需要知道这些被废弃的修饰符和新版中的哪些修饰符对应, 以 =WebGL= 作为例子进行学习是一个不错的选择.

    实际上, 开发人员在大部分的 =shading= 时间里面都是只和 =Vertex Shader= 和 =Fragment Shader= 两个阶段打交道, 因此我们主要其中介绍这两个阶段中能用到的修饰符.

    这里准备了一个例子[[iframe:../../../examples/learn-webgl-how-to-read-data/index.html]]用于进行讲解和实验.

**** Vertex Shader

     在[[section-3][第 3 节]]里面我们已经知道怎么把顶点数据传给 =GPU= 的了, 既然要写 =shader program=, 那么就需要知道如何获取这些顶点数据.
     
     
